[ml2]
# (ListOpt) List of network type driver entrypoints to be loaded from
# the neutron.ml2.type_drivers namespace.
#
# Example: type_drivers = flat,vlan,gre,vxlan
{% set type_drivers = ['local'] %}
{% if True %}
{% set _ = type_drivers.append('vlan') %}
{% endif %}
{% if neutron.enable_flat_networks %}
{% set _ = type_drivers.append('flat') %}
{% endif %}
{% if neutron.enable_tunneling %}
{% set type_drivers = type_drivers + neutron.tunnel_types %}
{% endif %}
type_drivers = {{ type_drivers|join(',') }}

# (ListOpt) Ordered list of network_types to allocate as tenant
# networks. The default value 'local' is useful for single-box testing
# but provides no connectivity between hosts.
#
# Example: tenant_network_types = vlan,gre,vxlan
tenant_network_types = {{ neutron.tenant_network_type }}

# (ListOpt) Ordered list of networking mechanism driver entrypoints
# to be loaded from the neutron.ml2.mechanism_drivers namespace.
# Example: mechanism_drivers = arista
# Example: mechanism_drivers = cisco,logger
mechanism_drivers = linuxbridge

[ml2_type_vlan]
# (ListOpt) List of <physical_network>[:<vlan_min>:<vlan_max>] tuples
# specifying physical_network names usable for VLAN provider and
# tenant networks, as well as ranges of VLAN tags on each
# physical_network available for allocation as tenant networks.
#
network_vlan_ranges = {{ neutron.network_vlan_ranges }}
# Example: network_vlan_ranges = physnet1:1000:2999,physnet2

[vlan]
network_vlan_ranges = {{ neutron.network_vlan_ranges }}

{% if neutron.enable_flat_networks -%}
[ml2_type_flat]
flat_networks = *
{% endif %}

[ml2_type_gre]
# (ListOpt) Comma-separated list of <tun_min>:<tun_max> tuples enumerating ranges of GRE tunnel IDs that are available for tenant network allocation
tunnel_id_ranges = 1:1000

[ml2_type_vxlan]
# (ListOpt) Comma-separated list of <vni_min>:<vni_max> tuples enumerating
# ranges of VXLAN VNI IDs that are available for tenant network allocation.
#
vni_ranges = 1:4095

# (StrOpt) Multicast group for the VXLAN interface. When configured, will
# enable sending all broadcast traffic to this multicast group. When left
# unconfigured, will disable multicast VXLAN mode.
#
# vxlan_group =
vxlan_group = 239.1.1.1

[vxlan]
# LinuxBridge agent VXLAN config: should match ML2 config
enable_vxlan = {{ neutron.enable_tunneling and "vxlan" in neutron.tunnel_types }}
local_ip = {{ primary_ip }}
# Set TTL on VXLAN datagrams to 1 to confine to local broadcast domain
ttl = 1
vxlan_group = 239.1.1.1
l2_population = False

[database]
{% if haproxy.mysql and 'controller' in group_names -%}
sql_connection = mysql://neutron:{{ secrets.db_password }}@127.0.0.1:3307/neutron?charset=utf8
{% else -%}
sql_connection = mysql://neutron:{{ secrets.db_password }}@{{ endpoints.db }}:3306/neutron?charset=utf8
{% endif -%}

[linux_bridge]
physical_interface_mappings = {{ neutron.bridge_mappings }}

[agent]
{% if neutron.enable_tunneling and neutron.tunnel_types is defined %}
tunnel_types = {{ neutron.tunnel_types|join(' ,') }}
{% endif %}
root_helper = sudo /usr/local/bin/neutron-rootwrap /etc/neutron/rootwrap.conf

[securitygroup]
enable_security_group = True
firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver
