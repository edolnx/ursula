---
- name: Check if keystone user exists
  action: shell getent passwd keystone
  register: keystone_user
  failed_when: False
  changed_when: False

- name: keystone user
  user: name=keystone shell=/bin/false createhome=no
  when: keystone_user|success

- name: keystone user
  user: name=keystone comment=keystone shell=/bin/false system=yes
        home=/nonexistent createhome=no
  when: not keystone_user|success

- name: WORKAROUND - keystone does not include babel in dependencies
  pip: name=babel

- name: get keystone source repo
  git: repo={{ openstack.git_mirror }}/keystone.git
       dest=/opt/stack/keystone
       version={{ keystone.rev }}
       update={{ openstack.git_update }}
  register: result
  until: result|success
  retries: 3
  delay: 60
  notify:
    - pip install keystone
    - restart keystone services

- meta: flush_handlers

- name: keystone config dir
  file: dest=/etc/keystone state=directory

- name: keystone log dir
  file: dest=/var/log/keystone state=directory mode=0755 owner=keystone
        group=keystone

- name: install keystone service
  upstart_service: name=keystone user=keystone cmd=/usr/local/bin/keystone-all
                   config_dirs=/etc/keystone

- name: configure keystone
  template: src={{ item }} dest=/etc/keystone/ mode=0644
  with_fileglob: ../templates/etc/keystone/*
  notify:
    - restart keystone services

- name: create keystone PKI dirs
  file: path={{ item }} state=directory owner=keystone group=keystone
        mode=0700
  with_items:
    - /etc/keystone/ssl/certs
    - /etc/keystone/ssl/private

- name: generate keystone PKI certs
  command: keystone-manage pki_setup --keystone-user keystone
           --keystone-group keystone
           creates=/etc/keystone/ssl/private/cakey.pem
  run_once: true
  notify:
    - restart keystone services

- name: slurp keystone certs
  slurp: src={{ item }}
  with_items:
    - /etc/keystone/ssl/certs/ca.pem
    - /etc/keystone/ssl/certs/signing_cert.pem
    - /etc/keystone/ssl/private/cakey.pem
    - /etc/keystone/ssl/private/signing_key.pem
  register: pki_certs
  run_once: true
  no_log: true

- name: write out keystone certs
  copy:
    dest: "{{ item.item }}"
    content: "{{ item.content | b64decode }}"
    owner: keystone
    group: keystone
    mode: 0700
  with_items: pki_certs.results
  no_log: true
  notify:
    - restart keystone services

- meta: flush_handlers

- name: start keystone
  service: name=keystone state=started

- name: permit access to keystone
  ufw: rule=allow to_port={{ item }} proto=tcp
  with_items:
    - 5001
    - 35358

- name: add cron job to clean up expired tokens
  template: src=etc/cron.hourly/drop-expired-keystone-tokens
            dest=/etc/cron.hourly/drop-expired-keystone-tokens
            owner=root group=root mode=0755

- include: monitoring.yml tags=monitoring,common

- name: ensure apache listening on keystone ports
  lineinfile: dest=/etc/apache2/ports.conf line="{{ item }}"
  with_items:
    - "Listen 5001"
    - "Listen 35358"
  notify:
    - reload apache

- name: set up keystone site on ubuntu 12.04
  template: src=etc/apache2/sites-available/{{ item }}.conf
            dest=/etc/apache2/sites-available/{{ item }}
  when: ansible_distribution_version == "12.04"
  with_items:
    - keystone
    - keystone-admin
  notify:
    - reload apache

- name: set up keystone site on newer ubuntu
  template: src=etc/apache2/sites-available/{{ item }}.conf
            dest=/etc/apache2/sites-available/{{ item }}.conf
  when: ansible_distribution_version != "12.04"
  with_items:
    - keystone
    - keystone-admin
  notify:
    - reload apache

- name: enable keystone apache site
  apache2_site: state=enabled name={{ item }}
  with_items:
    - keystone
    - keystone-admin
  notify:
    - reload apache
